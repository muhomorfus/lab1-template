// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package generated

import (
	"fmt"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message *string `json:"message,omitempty"`
}

// PersonRequest defines model for PersonRequest.
type PersonRequest struct {
	Address *string `json:"address,omitempty"`
	Age     *int32  `json:"age,omitempty"`
	Name    string  `json:"name"`
	Work    *string `json:"work,omitempty"`
}

// PersonResponse defines model for PersonResponse.
type PersonResponse struct {
	Address *string `json:"address,omitempty"`
	Age     *int32  `json:"age,omitempty"`
	Id      int32   `json:"id"`
	Name    string  `json:"name"`
	Work    *string `json:"work,omitempty"`
}

// ValidationErrorResponse defines model for ValidationErrorResponse.
type ValidationErrorResponse struct {
	Errors  *map[string]string `json:"errors,omitempty"`
	Message *string            `json:"message,omitempty"`
}

// CreatePersonJSONRequestBody defines body for CreatePerson for application/json ContentType.
type CreatePersonJSONRequestBody = PersonRequest

// EditPersonJSONRequestBody defines body for EditPerson for application/json ContentType.
type EditPersonJSONRequestBody = PersonRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all Persons
	// (GET /api/v1/persons)
	ListPersons(c *fiber.Ctx) error
	// Create new Person
	// (POST /api/v1/persons)
	CreatePerson(c *fiber.Ctx) error
	// Remove Person by ID
	// (DELETE /api/v1/persons/{id})
	DeletePerson(c *fiber.Ctx, id int32) error
	// Get Person by ID
	// (GET /api/v1/persons/{id})
	GetPerson(c *fiber.Ctx, id int32) error
	// Update Person by ID
	// (PATCH /api/v1/persons/{id})
	EditPerson(c *fiber.Ctx, id int32) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// ListPersons operation middleware
func (siw *ServerInterfaceWrapper) ListPersons(c *fiber.Ctx) error {

	return siw.Handler.ListPersons(c)
}

// CreatePerson operation middleware
func (siw *ServerInterfaceWrapper) CreatePerson(c *fiber.Ctx) error {

	return siw.Handler.CreatePerson(c)
}

// DeletePerson operation middleware
func (siw *ServerInterfaceWrapper) DeletePerson(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.DeletePerson(c, id)
}

// GetPerson operation middleware
func (siw *ServerInterfaceWrapper) GetPerson(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetPerson(c, id)
}

// EditPerson operation middleware
func (siw *ServerInterfaceWrapper) EditPerson(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.EditPerson(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/api/v1/persons", wrapper.ListPersons)

	router.Post(options.BaseURL+"/api/v1/persons", wrapper.CreatePerson)

	router.Delete(options.BaseURL+"/api/v1/persons/:id", wrapper.DeletePerson)

	router.Get(options.BaseURL+"/api/v1/persons/:id", wrapper.GetPerson)

	router.Patch(options.BaseURL+"/api/v1/persons/:id", wrapper.EditPerson)

}
